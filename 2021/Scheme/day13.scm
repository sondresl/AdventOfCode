(load "utils.scm")

(define (parse filename)
  (let* ((parts (->> (read-line-string filename)
                     (map string->list)
                     (span (compose not null?))))
         (coords (map (lambda (x) (->> x
                                       (split-on #\,)
                                       (map (compose string->number list->string))
                                       ((lambda (x) (cons (car x) (cadr x))))))
                      (car parts)))
         (folds (->> (cdr (cdr parts))
                     (map (lambda (x) (drop 2 (split-on #\space x))))
                     (apply append)
                     (map (lambda (x) (split-on #\= x)))
                     (map (lambda (p) (cons (caar p) (string->number (list->string (cadr p)))))))))
    (cons coords folds)))

(define (bounds coords)
  (let ((mx (maximum (map car coords)))
        (my (maximum (map cdr coords))))
    (cons mx my)))

(define (fold coords ins)
  (define (foldOne coord axis value)
    (let* ((coord-val (if (eq? #\x axis) (car coord) (cdr coord))))
      (if (< coord-val value)
        coord
        (let ((new (- value (abs (- value coord-val)))))
          (if (eq? #\x axis)
            (cons new (cdr coord))
            (cons (car coord) new))))))
  (define (inner items res ins)
    (if (null? items)
      res
      (let ((new (foldOne (car items) (car ins) (cdr ins))))
        (if (member new res)
          (inner (cdr items) res ins)
          (inner (cdr items) (cons new res) ins)))))
  (inner coords '() ins))

(define (display-grid coords)
  (let* ((bs (bounds coords))
         (mx (car bs))
         (my (cdr bs)))
    (for-each (lambda (y)
                (for-each (lambda (x)
                            (if (member (cons x y) coords)
                              (display "â–ˆ")
                              (display " ")))
                          (range 0 mx))
                (newline))
              (range 0 my))))

(define (main)
  (let* ((input (parse "../data/day13.in"))
         (coords (car input))
         (folds (cdr input)))
    (print (length (fold coords (car folds))))
    (display-grid (foldl fold coords folds))))

(main)

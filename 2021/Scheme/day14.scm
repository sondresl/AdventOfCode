(load "utils.scm")

(define (parse filename)
  (let* ((lines (read-line-string filename))
         (poly (car lines))
         (rest (->> (cddr lines)
                    (map string->list)
                    (map (partial split-on #\space))
                    (map (lambda (x) (cons (cons (caar x) (cadar x)) (caaddr x)))))))
    (cons poly rest)))

(define (zipWithTail items)
  (map (flip cons) (cdr items) items))

(define (lookup x xs)
  (cdr (assoc x xs)))

(define (insert cmp n ch cnt)
  (define (inner cnt)
    (cond ((null? cnt) (cons (cons ch n) '()))
          ((cmp (caar cnt) ch)
           (cons (cons ch (+ (cdar cnt) n)) (cdr cnt)))
          (else (cons (car cnt)
                      (inner (cdr cnt))))))
  (inner cnt))

(define (initial-count cmp poly)
  (foldr (partial insert cmp 1) '() poly))

(define (react rules pairs letters)
  (let loop ((loop-pairs (map car (filter (lambda (x) (not (zero? (cdr x)))) pairs)))
             (letters letters)
             (new-pairs '()))
    (if (null? loop-pairs) 
      (cons new-pairs letters)
      (let* ((pair (car loop-pairs))
             (new-ch (lookup pair rules))
             (pair-count (lookup pair pairs))
             (left-pair (cons (car pair) new-ch))
             (right-pair (cons new-ch (cdr pair)))
             (new-new-pairs (->> (insert equal? pair-count left-pair new-pairs)
                                 (insert equal? pair-count right-pair)
                                 (insert equal? 0 pair))))
        (loop (cdr loop-pairs) (insert eq? pair-count new-ch letters) new-new-pairs)))))

(define (run n rules pair-count letter-count) 
  (let ((res (iterate-n n 
                        (uncurry (partial react rules)) 
                        (cons pair-count letter-count))))
    (->> (cdr res)
         (map cdr)
         (ap2 - maximum minimum))))

(define (main)
  (let* ((input (parse "../data/day14.in"))
         (poly (initial-count eq? (string->list (car input))))
         (pair-count (initial-count equal? (zipWithTail (string->list (car input)))))
         (rules (cdr input)))
    (cons (run 10 rules pair-count poly)
          (run 40 rules pair-count poly))))

(main)
